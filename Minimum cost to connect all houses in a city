class Solution {
    public int minCost(int[][] houses) {
        int n = houses.length;
        if (n == 0) return 0;
        
        boolean[] visited = new boolean[n];
        PriorityQueue<Edge> minHeap = new PriorityQueue<>((a, b) -> a.cost - b.cost);
        
        // Start with the first house
        visited[0] = true;
        for (int i = 1; i < n; i++) {
            int cost = Math.abs(houses[0][0] - houses[i][0]) + Math.abs(houses[0][1] - houses[i][1]);
            minHeap.offer(new Edge(0, i, cost));
        }
        
        int totalCost = 0;
        int edgesUsed = 0;
        
        while (!minHeap.isEmpty() && edgesUsed < n - 1) {
            Edge edge = minHeap.poll();
            if (visited[edge.to]) continue;
            
            visited[edge.to] = true;
            totalCost += edge.cost;
            edgesUsed++;
            
            for (int i = 0; i < n; i++) {
                if (!visited[i]) {
                    int cost = Math.abs(houses[edge.to][0] - houses[i][0]) + Math.abs(houses[edge.to][1] - houses[i][1]);
                    minHeap.offer(new Edge(edge.to, i, cost));
                }
            }
        }
        
        return totalCost;
    }
    
    class Edge {
        int from;
        int to;
        int cost;
        
        Edge(int from, int to, int cost) {
            this.from = from;
            this.to = to;
            this.cost = cost;
        }
    }
}
